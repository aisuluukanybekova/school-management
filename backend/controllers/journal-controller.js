const mongoose = require('mongoose');
const Gradebook = require('../models/gradebookSchema');

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–ª–∞—Å—Å—É, –ø—Ä–µ–¥–º–µ—Ç—É –∏ —á–µ—Ç–≤–µ—Ä—Ç–∏
const getGradebook = async (req, res) => {
  try {
    const { classId, subjectId, term } = req.query;

    if (
      !mongoose.Types.ObjectId.isValid(classId) ||
      !mongoose.Types.ObjectId.isValid(subjectId) ||
      isNaN(Number(term))
    ) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞' });
    }

    const gradebook = await Gradebook.findOne({
      classId,
      subjectId,
      term: Number(term)
    });

    if (!gradebook) {
      // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –≤ –±–∞–∑–µ
      return res.status(200).json({ grades: [] });
    }

    res.status(200).json(gradebook);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
const saveGradebook = async (req, res) => {
  try {
    const { classId, subjectId, teacherId, grades, term } = req.body;

    if (
      !mongoose.Types.ObjectId.isValid(classId) ||
      !mongoose.Types.ObjectId.isValid(subjectId) ||
      !mongoose.Types.ObjectId.isValid(teacherId) ||
      !Array.isArray(grades) ||
      isNaN(Number(term))
    ) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞' });
    }

    let gradebook = await Gradebook.findOne({
      classId,
      subjectId,
      term: Number(term)
    });

    if (gradebook) {
      gradebook.grades = grades;
      gradebook.teacherId = teacherId;
    } else {
      gradebook = new Gradebook({ classId, subjectId, teacherId, term: Number(term), grades });
    }

    await gradebook.save();
    res.status(200).json({ message: '–û—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', gradebook });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
const getGradesByStudent = async (req, res) => {
  try {
    const { studentId } = req.params;

    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:', studentId);

    const all = await Gradebook.find({ 'grades.studentId': studentId })
      .populate('subjectId', 'subName')
      .populate('classId', 'sclassName');

    console.log('üìö –ù–∞–π–¥–µ–Ω–æ –∂—É—Ä–Ω–∞–ª–æ–≤:', all.length);

    const result = [];

    all.forEach(entry => {
      const studentEntry = entry.grades.find(g => g.studentId.toString() === studentId);
      if (studentEntry) {
      result.push({
  subjectId: entry.subjectId?._id?.toString(), // üß† —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ!
  term: entry.term,
  values: Array.isArray(studentEntry.values) ? studentEntry.values : []
});
      }
    });

    res.status(200).json({ success: true, grades: result });
  } catch (err) {
    console.error(' –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ —É—á–µ–Ω–∏–∫–∞:', err.message);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
};


module.exports = {
  getGradebook,
  saveGradebook,
  getGradesByStudent
};
