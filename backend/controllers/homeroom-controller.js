const AttendanceJournal = require('../models/attendanceJournalSchema');
const Gradebook = require('../models/gradebookSchema');
const Student = require('../models/studentSchema');
require('../models/subjectSchema'); 

const getHomeroomSummary = async (req, res) => {
  const { classId } = req.params;
  const { term, subjectId } = req.query;

  try {
    if (!term) {
      return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—å (term)' });
    }

    console.log(' –ó–∞–ø—Ä–æ—Å: ', { classId, term, subjectId });

    // === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ===
    const students = await Student.find({ sclassName: classId }).lean();
    if (!students || students.length === 0) {
      console.log(' –ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ');
      return res.status(200).json({ students: [] });
    }
    console.log(' –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', students.length);

    // === –ü—Ä–æ–ø—É—Å–∫–∏ ===
    const attendanceFilter = { classId, term };
    if (subjectId) attendanceFilter.subjectId = subjectId;

    const attendanceDocs = await AttendanceJournal.find(attendanceFilter).lean();
    console.log('üìò –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', attendanceDocs?.length || 0);

    const attendanceMap = {};
    (attendanceDocs || []).forEach(doc => {
      (doc.records || []).forEach(({ studentId, date }) => {
        if (!attendanceMap[studentId]) attendanceMap[studentId] = [];
        attendanceMap[studentId].push(date);
      });
    });

    // === –û—Ü–µ–Ω–∫–∏ ===
    const gradeFilter = { classId, term };
    if (subjectId) gradeFilter.subjectId = subjectId;

    const gradeDocs = await Gradebook.find(gradeFilter)
      .populate({
        path: 'subjectId',
        select: 'subName',
        strictPopulate: false,
      })
      .lean();

    console.log('üìò –û—Ü–µ–Ω–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', gradeDocs?.length || 0);

    const gradeMap = {};
    (gradeDocs || []).forEach(doc => {
      if (!doc.subjectId || !doc.subjectId.subName) {
        console.warn(' –ü—Ä–æ–ø—É—â–µ–Ω gradeDoc ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subjectId');
        return;
      }

      const subName = doc.subjectId.subName;

      if (!Array.isArray(doc.grades)) return;

      doc.grades.forEach(({ studentId, values }) => {
        const validGrades = Array.isArray(values)
          ? values.filter(v => typeof v.grade === 'number')
          : [];

        const avg = validGrades.length
          ? validGrades.reduce((sum, g) => sum + g.grade, 0) / validGrades.length
          : 0;

        if (!gradeMap[studentId]) gradeMap[studentId] = [];
        gradeMap[studentId].push({
          subject: subName,
          avg: Number(avg.toFixed(2))
        });
      });
    });

    // === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ===
    const result = students.map(student => ({
      _id: student._id,
      name: student.name,
      phone: student.rollNum || '-',
      absentCount: attendanceMap[student._id]?.length || 0,
      grades: gradeMap[student._id] || []
    }));

    res.status(200).json({ students: result });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ö–ª–∞—Å—Å–Ω–æ–≥–æ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:');
    console.error('classId:', classId);
    console.error('term:', term);
    console.error('subjectId:', subjectId);
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
    console.error('Stack:', err.stack);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
};

module.exports = { getHomeroomSummary };
