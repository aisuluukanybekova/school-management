import React, { useState, useEffect } from 'react';
import {
  Box, Typography, Table, TableHead, TableRow, TableCell,
  TableBody, FormControl, InputLabel, Select, MenuItem, Button,
  Paper, TableContainer, Alert, Stack
} from '@mui/material';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Download } from '@mui/icons-material';
import axios from 'axios';
import { useSelector } from 'react-redux';

axios.defaults.baseURL = 'http://localhost:5001';

const daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–í—Å—è –Ω–µ–¥–µ–ª—è'];

const ScheduleTable = () => {
  const admin = useSelector((state) => state.user.currentUser);
  const [classes, setClasses] = useState([]);
  const [selectedClass, setSelectedClass] = useState('');
  const [selectedDay, setSelectedDay] = useState('');
  const [schedules, setSchedules] = useState([]);
  const [error, setError] = useState('');

  useEffect(() => {
    const loadClasses = async () => {
      try {
        const schoolId = admin?.schoolId || admin?.school?._id;
        if (!schoolId) {
          setError('–ù–µ –Ω–∞–π–¥–µ–Ω ID —à–∫–æ–ª—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        const res = await axios.get(`/api/classes/school/${schoolId}`);
        setClasses(res.data);
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã.');
      }
    };
    if (admin) loadClasses();
  }, [admin]);

  useEffect(() => {
    if (selectedClass && selectedDay) fetchSchedules();
  }, [selectedClass, selectedDay]);

  const fetchSchedules = async () => {
    try {
      const res = await axios.get(`/api/schedule/class/${selectedClass}`);
      const all = res.data?.schedules || [];

      setSchedules(
        selectedDay === '–í—Å—è –Ω–µ–¥–µ–ª—è'
          ? all
          : all.filter((item) => item.day === selectedDay)
      );
    } catch {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.');
    }
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFont('courier', 'normal');
    doc.setFontSize(16);

    if (selectedDay === '–í—Å—è –Ω–µ–¥–µ–ª—è') {
      daysOfWeek.slice(0, 5).forEach((day, idx) => {
        const daySchedules = schedules.filter(s => s.day === day);

        if (idx !== 0) doc.addPage();
        doc.text(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${day}`, 14, 20);

        autoTable(doc, {
          startY: 30,
          styles: { font: 'courier' },
          head: [["–ù–∞—á–∞–ª–æ", "–ö–æ–Ω–µ—Ü", "–¢–∏–ø", "–ü—Ä–µ–¥–º–µ—Ç", "–£—á–∏—Ç–µ–ª—å"]],
          body: daySchedules.map(entry => [
            entry.startTime,
            entry.endTime,
            entry.type === 'lesson' ? '–£—Ä–æ–∫' : '–ü–µ—Ä–µ–º–µ–Ω–∞',
            entry.type === 'lesson' ? entry.subjectId?.subName || '' : '-',
            entry.type === 'lesson' ? entry.teacherId?.name || '' : '-',
          ])
        });
      });

      doc.save(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–≤—Å—è_–Ω–µ–¥–µ–ª—è.pdf`);
    } else {
      doc.text(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${selectedDay}`, 14, 20);
      autoTable(doc, {
        startY: 30,
        styles: { font: 'courier' },
        head: [["–ù–∞—á–∞–ª–æ", "–ö–æ–Ω–µ—Ü", "–¢–∏–ø", "–ü—Ä–µ–¥–º–µ—Ç", "–£—á–∏—Ç–µ–ª—å"]],
        body: schedules.map(entry => [
          entry.startTime,
          entry.endTime,
          entry.type === 'lesson' ? '–£—Ä–æ–∫' : '–ü–µ—Ä–µ–º–µ–Ω–∞',
          entry.type === 'lesson' ? entry.subjectId?.subName || '' : '-',
          entry.type === 'lesson' ? entry.teacherId?.name || '' : '-',
        ])
      });
      doc.save(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_${selectedDay}.pdf`);
    }
  };

  return (
    <Box p={4}>
      <Typography variant="h5" gutterBottom fontWeight="bold">
        üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      </Typography>

      {error && (
        <Stack my={2}>
          <Alert severity="error">{error}</Alert>
        </Stack>
      )}

      <Box display="flex" flexWrap="wrap" gap={2} my={2}>
        <FormControl sx={{ minWidth: 200 }} size="small">
          <InputLabel>–ö–ª–∞—Å—Å</InputLabel>
          <Select value={selectedClass} onChange={(e) => setSelectedClass(e.target.value)} label="–ö–ª–∞—Å—Å">
            {classes.map((cls) => (
              <MenuItem key={cls._id} value={cls._id}>
                {cls.sclassName}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl sx={{ minWidth: 200 }} size="small">
          <InputLabel>–î–µ–Ω—å</InputLabel>
          <Select value={selectedDay} onChange={(e) => setSelectedDay(e.target.value)} label="–î–µ–Ω—å">
            {daysOfWeek.map((day) => (
              <MenuItem key={day} value={day}>{day}</MenuItem>
            ))}
          </Select>
        </FormControl>

        <Button
          variant="contained"
          startIcon={<Download />}
          onClick={generatePDF}
          disabled={schedules.length === 0}
          sx={{ height: 40 }}
        >
          –°–∫–∞—á–∞—Ç—å PDF
        </Button>
      </Box>

      {selectedDay !== '–í—Å—è –Ω–µ–¥–µ–ª—è' ? (
        <ScheduleTableComponent data={schedules} />
      ) : (
        daysOfWeek.slice(0, 5).map((day) => (
          <Box key={day} mb={4}>
            <Typography variant="h6" gutterBottom>{day}</Typography>
            <ScheduleTableComponent data={schedules.filter((s) => s.day === day)} />
          </Box>
        ))
      )}
    </Box>
  );
};

const ScheduleTableComponent = ({ data }) => (
  <TableContainer component={Paper} elevation={2}>
    <Table>
      <TableHead sx={{ backgroundColor: '#f5f5f5' }}>
        <TableRow>
          <TableCell align="center">–ù–∞—á–∞–ª–æ</TableCell>
          <TableCell align="center">–ö–æ–Ω–µ—Ü</TableCell>
          <TableCell align="center">–¢–∏–ø</TableCell>
          <TableCell align="center">–ü—Ä–µ–¥–º–µ—Ç</TableCell>
          <TableCell align="center">–£—á–∏—Ç–µ–ª—å</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {data.map((entry) => (
          <TableRow
            key={entry._id}
            sx={{
              backgroundColor: entry.type === 'break' ? '#e0e0e0' : 'inherit'
            }}
          >
            <TableCell align="center">{entry.startTime}</TableCell>
            <TableCell align="center">{entry.endTime}</TableCell>
            <TableCell align="center">{entry.type === 'lesson' ? '–£—Ä–æ–∫' : '–ü–µ—Ä–µ–º–µ–Ω–∞'}</TableCell>
            <TableCell align="center">{entry.type === 'lesson' ? entry.subjectId?.subName : '‚Äî'}</TableCell>
            <TableCell align="center">{entry.type === 'lesson' ? entry.teacherId?.name : '‚Äî'}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  </TableContainer>
);

export default ScheduleTable;
 